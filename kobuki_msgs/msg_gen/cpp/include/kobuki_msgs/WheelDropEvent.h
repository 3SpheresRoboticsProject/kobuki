/* Auto-generated by genmsg_cpp for file /opt/jihoonl/kobuki/kobuki_msgs/msg/WheelDropEvent.msg */
#ifndef KOBUKI_MSGS_MESSAGE_WHEELDROPEVENT_H
#define KOBUKI_MSGS_MESSAGE_WHEELDROPEVENT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace kobuki_msgs
{
template <class ContainerAllocator>
struct WheelDropEvent_ {
  typedef WheelDropEvent_<ContainerAllocator> Type;

  WheelDropEvent_()
  : state(0)
  , wheel(0)
  {
  }

  WheelDropEvent_(const ContainerAllocator& _alloc)
  : state(0)
  , wheel(0)
  {
  }

  typedef uint8_t _state_type;
  uint8_t state;

  typedef uint8_t _wheel_type;
  uint8_t wheel;

  enum { LEFT = 0 };
  enum { RIGHT = 1 };
  enum { RAISED = 0 };
  enum { DROPPED = 1 };

  typedef boost::shared_ptr< ::kobuki_msgs::WheelDropEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kobuki_msgs::WheelDropEvent_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct WheelDropEvent
typedef  ::kobuki_msgs::WheelDropEvent_<std::allocator<void> > WheelDropEvent;

typedef boost::shared_ptr< ::kobuki_msgs::WheelDropEvent> WheelDropEventPtr;
typedef boost::shared_ptr< ::kobuki_msgs::WheelDropEvent const> WheelDropEventConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::kobuki_msgs::WheelDropEvent_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::kobuki_msgs::WheelDropEvent_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace kobuki_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kobuki_msgs::WheelDropEvent_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kobuki_msgs::WheelDropEvent_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kobuki_msgs::WheelDropEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d5872d35ba1f2183db249e0f0efb87a4";
  }

  static const char* value(const  ::kobuki_msgs::WheelDropEvent_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd5872d35ba1f2183ULL;
  static const uint64_t static_value2 = 0xdb249e0f0efb87a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::kobuki_msgs::WheelDropEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kobuki_msgs/WheelDropEvent";
  }

  static const char* value(const  ::kobuki_msgs::WheelDropEvent_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kobuki_msgs::WheelDropEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Provides a wheel drop event\n\
# This message is generated whenever a wheel is dropped (robot fell or was raised) or raised (normal condition).\n\
\n\
uint8 LEFT  = 0\n\
uint8 RIGHT = 1\n\
\n\
uint8 RAISED  = 0\n\
uint8 DROPPED = 1\n\
\n\
uint8 state\n\
uint8 wheel\n\
\n\
";
  }

  static const char* value(const  ::kobuki_msgs::WheelDropEvent_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::kobuki_msgs::WheelDropEvent_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kobuki_msgs::WheelDropEvent_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
    stream.next(m.wheel);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WheelDropEvent_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kobuki_msgs::WheelDropEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::kobuki_msgs::WheelDropEvent_<ContainerAllocator> & v) 
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "wheel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel);
  }
};


} // namespace message_operations
} // namespace ros

#endif // KOBUKI_MSGS_MESSAGE_WHEELDROPEVENT_H


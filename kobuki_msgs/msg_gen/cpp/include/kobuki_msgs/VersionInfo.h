/* Auto-generated by genmsg_cpp for file /opt/jihoonl/kobuki/kobuki_msgs/msg/VersionInfo.msg */
#ifndef KOBUKI_MSGS_MESSAGE_VERSIONINFO_H
#define KOBUKI_MSGS_MESSAGE_VERSIONINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace kobuki_msgs
{
template <class ContainerAllocator>
struct VersionInfo_ {
  typedef VersionInfo_<ContainerAllocator> Type;

  VersionInfo_()
  : firmware(0)
  , hardware(0)
  , software(0)
  , udid()
  {
  }

  VersionInfo_(const ContainerAllocator& _alloc)
  : firmware(0)
  , hardware(0)
  , software(0)
  , udid(_alloc)
  {
  }

  typedef uint16_t _firmware_type;
  uint16_t firmware;

  typedef uint16_t _hardware_type;
  uint16_t hardware;

  typedef uint32_t _software_type;
  uint32_t software;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _udid_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  udid;


  typedef boost::shared_ptr< ::kobuki_msgs::VersionInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kobuki_msgs::VersionInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VersionInfo
typedef  ::kobuki_msgs::VersionInfo_<std::allocator<void> > VersionInfo;

typedef boost::shared_ptr< ::kobuki_msgs::VersionInfo> VersionInfoPtr;
typedef boost::shared_ptr< ::kobuki_msgs::VersionInfo const> VersionInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::kobuki_msgs::VersionInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::kobuki_msgs::VersionInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace kobuki_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kobuki_msgs::VersionInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kobuki_msgs::VersionInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kobuki_msgs::VersionInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "adb07428ccdeb5dcaa56f5ef3160a76c";
  }

  static const char* value(const  ::kobuki_msgs::VersionInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xadb07428ccdeb5dcULL;
  static const uint64_t static_value2 = 0xaa56f5ef3160a76cULL;
};

template<class ContainerAllocator>
struct DataType< ::kobuki_msgs::VersionInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kobuki_msgs/VersionInfo";
  }

  static const char* value(const  ::kobuki_msgs::VersionInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kobuki_msgs::VersionInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Contains version info for the kobuki platform.\n\
# Useful for introspection\n\
\n\
uint16 firmware\n\
uint16 hardware\n\
uint32 software\n\
uint32[] udid\n\
\n\
\n\
";
  }

  static const char* value(const  ::kobuki_msgs::VersionInfo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kobuki_msgs::VersionInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.firmware);
    stream.next(m.hardware);
    stream.next(m.software);
    stream.next(m.udid);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VersionInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kobuki_msgs::VersionInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::kobuki_msgs::VersionInfo_<ContainerAllocator> & v) 
  {
    s << indent << "firmware: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.firmware);
    s << indent << "hardware: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.hardware);
    s << indent << "software: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.software);
    s << indent << "udid[]" << std::endl;
    for (size_t i = 0; i < v.udid.size(); ++i)
    {
      s << indent << "  udid[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.udid[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // KOBUKI_MSGS_MESSAGE_VERSIONINFO_H


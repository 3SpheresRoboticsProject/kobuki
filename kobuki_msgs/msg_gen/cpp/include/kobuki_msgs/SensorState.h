/* Auto-generated by genmsg_cpp for file /opt/jihoonl/kobuki/kobuki_msgs/msg/SensorState.msg */
#ifndef KOBUKI_MSGS_MESSAGE_SENSORSTATE_H
#define KOBUKI_MSGS_MESSAGE_SENSORSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace kobuki_msgs
{
template <class ContainerAllocator>
struct SensorState_ {
  typedef SensorState_<ContainerAllocator> Type;

  SensorState_()
  : header()
  , time_stamp(0)
  , bumper(0)
  , wheel_drop(0)
  , cliff(0)
  , left_encoder(0)
  , right_encoder(0)
  , left_pwm(0)
  , right_pwm(0)
  , buttons(0)
  , charger(0)
  , battery(0)
  , bottom()
  , current()
  , over_current(0)
  , digital_input(0)
  , analog_input()
  {
  }

  SensorState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , time_stamp(0)
  , bumper(0)
  , wheel_drop(0)
  , cliff(0)
  , left_encoder(0)
  , right_encoder(0)
  , left_pwm(0)
  , right_pwm(0)
  , buttons(0)
  , charger(0)
  , battery(0)
  , bottom(_alloc)
  , current(_alloc)
  , over_current(0)
  , digital_input(0)
  , analog_input(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint16_t _time_stamp_type;
  uint16_t time_stamp;

  typedef uint8_t _bumper_type;
  uint8_t bumper;

  typedef uint8_t _wheel_drop_type;
  uint8_t wheel_drop;

  typedef uint8_t _cliff_type;
  uint8_t cliff;

  typedef uint16_t _left_encoder_type;
  uint16_t left_encoder;

  typedef uint16_t _right_encoder_type;
  uint16_t right_encoder;

  typedef int8_t _left_pwm_type;
  int8_t left_pwm;

  typedef int8_t _right_pwm_type;
  int8_t right_pwm;

  typedef uint8_t _buttons_type;
  uint8_t buttons;

  typedef uint8_t _charger_type;
  uint8_t charger;

  typedef uint8_t _battery_type;
  uint8_t battery;

  typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _bottom_type;
  std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  bottom;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _current_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  current;

  typedef uint8_t _over_current_type;
  uint8_t over_current;

  typedef uint16_t _digital_input_type;
  uint16_t digital_input;

  typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _analog_input_type;
  std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  analog_input;

  enum { Button0 = 1 };
  enum { Button1 = 2 };
  enum { Button2 = 4 };
  enum { ADAPTER = 16 };
  enum { DISCHARGING = 0 };
  enum { CHARGED = 2 };
  enum { CHARGING = 6 };

  typedef boost::shared_ptr< ::kobuki_msgs::SensorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kobuki_msgs::SensorState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SensorState
typedef  ::kobuki_msgs::SensorState_<std::allocator<void> > SensorState;

typedef boost::shared_ptr< ::kobuki_msgs::SensorState> SensorStatePtr;
typedef boost::shared_ptr< ::kobuki_msgs::SensorState const> SensorStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::kobuki_msgs::SensorState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::kobuki_msgs::SensorState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace kobuki_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kobuki_msgs::SensorState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kobuki_msgs::SensorState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kobuki_msgs::SensorState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "92e992cd3c66c18711c1ce707090fcc1";
  }

  static const char* value(const  ::kobuki_msgs::SensorState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x92e992cd3c66c187ULL;
  static const uint64_t static_value2 = 0x11c1ce707090fcc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::kobuki_msgs::SensorState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kobuki_msgs/SensorState";
  }

  static const char* value(const  ::kobuki_msgs::SensorState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kobuki_msgs::SensorState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Kobuki Sensor Data Messages\n\
#\n\
\n\
# Buttons bitmasks to decode byte \"buttons\"\n\
uint8 Button0 = 1  # 0x02\n\
uint8 Button1 = 2  # 0x01\n\
uint8 Button2 = 4  # 0x04\n\
\n\
# Byte \"charger\" format:\n\
# - first four bits distinguish between adapter or docking base charging\n\
uint8 ADAPTER     = 16 # bitmask 0x10\n\
# - last 4 bits specified the charging status\n\
uint8 DISCHARGING = 0\n\
uint8 CHARGED     = 2\n\
uint8 CHARGING    = 6\n\
\n\
\n\
Header header\n\
\n\
###################\n\
# Core Packet\n\
###################\n\
uint16 time_stamp\n\
uint8  bumper\n\
uint8  wheel_drop\n\
uint8  cliff\n\
uint16 left_encoder\n\
uint16 right_encoder\n\
int8  left_pwm\n\
int8  right_pwm\n\
uint8  buttons\n\
uint8  charger\n\
uint8  battery\n\
\n\
###################\n\
# Cliff Packet\n\
###################\n\
uint16[] bottom\n\
\n\
###################\n\
# Current Packet\n\
###################\n\
uint8[] current\n\
uint8 over_current\n\
\n\
###################\n\
# GP Input Packet\n\
###################\n\
uint16 digital_input\n\
uint16[] analog_input\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::kobuki_msgs::SensorState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::kobuki_msgs::SensorState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::kobuki_msgs::SensorState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kobuki_msgs::SensorState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.time_stamp);
    stream.next(m.bumper);
    stream.next(m.wheel_drop);
    stream.next(m.cliff);
    stream.next(m.left_encoder);
    stream.next(m.right_encoder);
    stream.next(m.left_pwm);
    stream.next(m.right_pwm);
    stream.next(m.buttons);
    stream.next(m.charger);
    stream.next(m.battery);
    stream.next(m.bottom);
    stream.next(m.current);
    stream.next(m.over_current);
    stream.next(m.digital_input);
    stream.next(m.analog_input);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SensorState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kobuki_msgs::SensorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::kobuki_msgs::SensorState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_stamp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "bumper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bumper);
    s << indent << "wheel_drop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_drop);
    s << indent << "cliff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cliff);
    s << indent << "left_encoder: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.left_encoder);
    s << indent << "right_encoder: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.right_encoder);
    s << indent << "left_pwm: ";
    Printer<int8_t>::stream(s, indent + "  ", v.left_pwm);
    s << indent << "right_pwm: ";
    Printer<int8_t>::stream(s, indent + "  ", v.right_pwm);
    s << indent << "buttons: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buttons);
    s << indent << "charger: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charger);
    s << indent << "battery: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery);
    s << indent << "bottom[]" << std::endl;
    for (size_t i = 0; i < v.bottom.size(); ++i)
    {
      s << indent << "  bottom[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.bottom[i]);
    }
    s << indent << "current[]" << std::endl;
    for (size_t i = 0; i < v.current.size(); ++i)
    {
      s << indent << "  current[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.current[i]);
    }
    s << indent << "over_current: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.over_current);
    s << indent << "digital_input: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.digital_input);
    s << indent << "analog_input[]" << std::endl;
    for (size_t i = 0; i < v.analog_input.size(); ++i)
    {
      s << indent << "  analog_input[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.analog_input[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // KOBUKI_MSGS_MESSAGE_SENSORSTATE_H


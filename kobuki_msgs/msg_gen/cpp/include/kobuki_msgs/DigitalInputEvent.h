/* Auto-generated by genmsg_cpp for file /opt/jihoonl/kobuki/kobuki_msgs/msg/DigitalInputEvent.msg */
#ifndef KOBUKI_MSGS_MESSAGE_DIGITALINPUTEVENT_H
#define KOBUKI_MSGS_MESSAGE_DIGITALINPUTEVENT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace kobuki_msgs
{
template <class ContainerAllocator>
struct DigitalInputEvent_ {
  typedef DigitalInputEvent_<ContainerAllocator> Type;

  DigitalInputEvent_()
  : values()
  {
    values.assign(false);
  }

  DigitalInputEvent_(const ContainerAllocator& _alloc)
  : values()
  {
    values.assign(false);
  }

  typedef boost::array<uint8_t, 4>  _values_type;
  boost::array<uint8_t, 4>  values;


  typedef boost::shared_ptr< ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DigitalInputEvent
typedef  ::kobuki_msgs::DigitalInputEvent_<std::allocator<void> > DigitalInputEvent;

typedef boost::shared_ptr< ::kobuki_msgs::DigitalInputEvent> DigitalInputEventPtr;
typedef boost::shared_ptr< ::kobuki_msgs::DigitalInputEvent const> DigitalInputEventConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace kobuki_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "93da823c8b121f8a3940ef3830c58e44";
  }

  static const char* value(const  ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x93da823c8b121f8aULL;
  static const uint64_t static_value2 = 0x3940ef3830c58e44ULL;
};

template<class ContainerAllocator>
struct DataType< ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kobuki_msgs/DigitalInputEvent";
  }

  static const char* value(const  ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Digital input - only four pins. \n\
\n\
# Array of values indices represent pins 0-3 respectively.\n\
bool[4] values\n\
\n\
";
  }

  static const char* value(const  ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.values);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DigitalInputEvent_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::kobuki_msgs::DigitalInputEvent_<ContainerAllocator> & v) 
  {
    s << indent << "values[]" << std::endl;
    for (size_t i = 0; i < v.values.size(); ++i)
    {
      s << indent << "  values[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.values[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // KOBUKI_MSGS_MESSAGE_DIGITALINPUTEVENT_H


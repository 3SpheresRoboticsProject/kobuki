/* Auto-generated by genmsg_cpp for file /opt/jihoonl/kobuki/kobuki_msgs/msg/RobotStateEvent.msg */
#ifndef KOBUKI_MSGS_MESSAGE_ROBOTSTATEEVENT_H
#define KOBUKI_MSGS_MESSAGE_ROBOTSTATEEVENT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace kobuki_msgs
{
template <class ContainerAllocator>
struct RobotStateEvent_ {
  typedef RobotStateEvent_<ContainerAllocator> Type;

  RobotStateEvent_()
  : state(0)
  {
  }

  RobotStateEvent_(const ContainerAllocator& _alloc)
  : state(0)
  {
  }

  typedef uint8_t _state_type;
  uint8_t state;

  enum { ONLINE = 1 };
  enum { OFFLINE = 0 };

  typedef boost::shared_ptr< ::kobuki_msgs::RobotStateEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kobuki_msgs::RobotStateEvent_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RobotStateEvent
typedef  ::kobuki_msgs::RobotStateEvent_<std::allocator<void> > RobotStateEvent;

typedef boost::shared_ptr< ::kobuki_msgs::RobotStateEvent> RobotStateEventPtr;
typedef boost::shared_ptr< ::kobuki_msgs::RobotStateEvent const> RobotStateEventConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::kobuki_msgs::RobotStateEvent_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::kobuki_msgs::RobotStateEvent_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace kobuki_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kobuki_msgs::RobotStateEvent_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kobuki_msgs::RobotStateEvent_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kobuki_msgs::RobotStateEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c6eccd4cb1f95df95635b56d6226ea32";
  }

  static const char* value(const  ::kobuki_msgs::RobotStateEvent_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc6eccd4cb1f95df9ULL;
  static const uint64_t static_value2 = 0x5635b56d6226ea32ULL;
};

template<class ContainerAllocator>
struct DataType< ::kobuki_msgs::RobotStateEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kobuki_msgs/RobotStateEvent";
  }

  static const char* value(const  ::kobuki_msgs::RobotStateEvent_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kobuki_msgs::RobotStateEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Provides a robot state event\n\
# This message is generated whenever the robot gets online/offline\n\
\n\
uint8 ONLINE  = 1\n\
uint8 OFFLINE = 0\n\
\n\
uint8 state\n\
\n\
";
  }

  static const char* value(const  ::kobuki_msgs::RobotStateEvent_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::kobuki_msgs::RobotStateEvent_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kobuki_msgs::RobotStateEvent_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RobotStateEvent_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kobuki_msgs::RobotStateEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::kobuki_msgs::RobotStateEvent_<ContainerAllocator> & v) 
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // KOBUKI_MSGS_MESSAGE_ROBOTSTATEEVENT_H

